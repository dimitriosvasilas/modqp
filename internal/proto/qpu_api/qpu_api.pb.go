// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/protobuf-spec/qpu_api.proto

package qpu_api

import (
	context "context"
	fmt "fmt"
	qpu "github.com/dvasilas/proteus/internal/proto/qpu"
	pb "github.com/dvasilas/proteus/pkg/proteus-go-client/pb"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OrderBy_Order int32

const (
	OrderBy_ASC  OrderBy_Order = 0
	OrderBy_DESC OrderBy_Order = 1
)

var OrderBy_Order_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}

var OrderBy_Order_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (x OrderBy_Order) String() string {
	return proto.EnumName(OrderBy_Order_name, int32(x))
}

func (OrderBy_Order) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_55c136aa8978e5e9, []int{7, 0}
}

type ResponseStreamRecord_StreamRecordType int32

const (
	// Not used for now.
	ResponseStreamRecord_UPDATEOP ResponseStreamRecord_StreamRecordType = 0
	// Respresents an update.
	// udpate = (value_before_update, value_after_update)
	ResponseStreamRecord_UPDATEDELTA ResponseStreamRecord_StreamRecordType = 1
	// Represents the state of a data item.
	ResponseStreamRecord_STATE ResponseStreamRecord_StreamRecordType = 2
	// Sometimes we exchange heartbeats in long-lived streams to make sure
	// the two parts are still alive and the connection is open.
	ResponseStreamRecord_HEARTBEAT ResponseStreamRecord_StreamRecordType = 3
	// It informs the receiver of the stream for the end of a 'getSnapshot'
	// query (all STATE records will be sent, but more UPDATEDELTA may follow).
	// It is missleading:
	// an END_OF_STREAM can be send in a steam, and the stream may then
	// continue being used (for UPDATEDELTA records).
	ResponseStreamRecord_END_OF_STREAM ResponseStreamRecord_StreamRecordType = 4
)

var ResponseStreamRecord_StreamRecordType_name = map[int32]string{
	0: "UPDATEOP",
	1: "UPDATEDELTA",
	2: "STATE",
	3: "HEARTBEAT",
	4: "END_OF_STREAM",
}

var ResponseStreamRecord_StreamRecordType_value = map[string]int32{
	"UPDATEOP":      0,
	"UPDATEDELTA":   1,
	"STATE":         2,
	"HEARTBEAT":     3,
	"END_OF_STREAM": 4,
}

func (x ResponseStreamRecord_StreamRecordType) String() string {
	return proto.EnumName(ResponseStreamRecord_StreamRecordType_name, int32(x))
}

func (ResponseStreamRecord_StreamRecordType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_55c136aa8978e5e9, []int{8, 0}
}

type ConfigResponse_QPUType int32

const (
	ConfigResponse_DATASTORE_DRIVER ConfigResponse_QPUType = 0
	ConfigResponse_SUM              ConfigResponse_QPUType = 1
	ConfigResponse_JOIN             ConfigResponse_QPUType = 2
)

var ConfigResponse_QPUType_name = map[int32]string{
	0: "DATASTORE_DRIVER",
	1: "SUM",
	2: "JOIN",
}

var ConfigResponse_QPUType_value = map[string]int32{
	"DATASTORE_DRIVER": 0,
	"SUM":              1,
	"JOIN":             2,
}

func (x ConfigResponse_QPUType) String() string {
	return proto.EnumName(ConfigResponse_QPUType_name, int32(x))
}

func (ConfigResponse_QPUType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_55c136aa8978e5e9, []int{11, 0}
}

type NoOpReq struct {
	Str                  string   `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoOpReq) Reset()         { *m = NoOpReq{} }
func (m *NoOpReq) String() string { return proto.CompactTextString(m) }
func (*NoOpReq) ProtoMessage()    {}
func (*NoOpReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_55c136aa8978e5e9, []int{0}
}

func (m *NoOpReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoOpReq.Unmarshal(m, b)
}
func (m *NoOpReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoOpReq.Marshal(b, m, deterministic)
}
func (m *NoOpReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoOpReq.Merge(m, src)
}
func (m *NoOpReq) XXX_Size() int {
	return xxx_messageInfo_NoOpReq.Size(m)
}
func (m *NoOpReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NoOpReq.DiscardUnknown(m)
}

var xxx_messageInfo_NoOpReq proto.InternalMessageInfo

func (m *NoOpReq) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

type NoOpResp struct {
	Str                  string   `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoOpResp) Reset()         { *m = NoOpResp{} }
func (m *NoOpResp) String() string { return proto.CompactTextString(m) }
func (*NoOpResp) ProtoMessage()    {}
func (*NoOpResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_55c136aa8978e5e9, []int{1}
}

func (m *NoOpResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoOpResp.Unmarshal(m, b)
}
func (m *NoOpResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoOpResp.Marshal(b, m, deterministic)
}
func (m *NoOpResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoOpResp.Merge(m, src)
}
func (m *NoOpResp) XXX_Size() int {
	return xxx_messageInfo_NoOpResp.Size(m)
}
func (m *NoOpResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NoOpResp.DiscardUnknown(m)
}

var xxx_messageInfo_NoOpResp proto.InternalMessageInfo

func (m *NoOpResp) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

type RequestStreamRecord struct {
	// Types that are valid to be assigned to Request:
	//	*RequestStreamRecord_QueryRequest
	//	*RequestStreamRecord_Ack
	Request              isRequestStreamRecord_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *RequestStreamRecord) Reset()         { *m = RequestStreamRecord{} }
func (m *RequestStreamRecord) String() string { return proto.CompactTextString(m) }
func (*RequestStreamRecord) ProtoMessage()    {}
func (*RequestStreamRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_55c136aa8978e5e9, []int{2}
}

func (m *RequestStreamRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestStreamRecord.Unmarshal(m, b)
}
func (m *RequestStreamRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestStreamRecord.Marshal(b, m, deterministic)
}
func (m *RequestStreamRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestStreamRecord.Merge(m, src)
}
func (m *RequestStreamRecord) XXX_Size() int {
	return xxx_messageInfo_RequestStreamRecord.Size(m)
}
func (m *RequestStreamRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestStreamRecord.DiscardUnknown(m)
}

var xxx_messageInfo_RequestStreamRecord proto.InternalMessageInfo

type isRequestStreamRecord_Request interface {
	isRequestStreamRecord_Request()
}

type RequestStreamRecord_QueryRequest struct {
	QueryRequest *QueryRequest `protobuf:"bytes,1,opt,name=queryRequest,proto3,oneof"`
}

type RequestStreamRecord_Ack struct {
	Ack *AckMsg `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

func (*RequestStreamRecord_QueryRequest) isRequestStreamRecord_Request() {}

func (*RequestStreamRecord_Ack) isRequestStreamRecord_Request() {}

func (m *RequestStreamRecord) GetRequest() isRequestStreamRecord_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *RequestStreamRecord) GetQueryRequest() *QueryRequest {
	if x, ok := m.GetRequest().(*RequestStreamRecord_QueryRequest); ok {
		return x.QueryRequest
	}
	return nil
}

func (m *RequestStreamRecord) GetAck() *AckMsg {
	if x, ok := m.GetRequest().(*RequestStreamRecord_Ack); ok {
		return x.Ack
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RequestStreamRecord) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RequestStreamRecord_QueryRequest)(nil),
		(*RequestStreamRecord_Ack)(nil),
	}
}

type QueryRequest struct {
	Query    *Query            `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Synchronous or asynhronous mode.
	// Only makes sence to use synchronous mode when the underlying datastore'
	// subscribe API has the ability to block updates waiting for acks.
	Sync                 bool     `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55c136aa8978e5e9, []int{3}
}

func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRequest.Unmarshal(m, b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return xxx_messageInfo_QueryRequest.Size(m)
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *QueryRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *QueryRequest) GetSync() bool {
	if m != nil {
		return m.Sync
	}
	return false
}

type Query struct {
	// Types that are valid to be assigned to Query:
	//	*Query_QueryAst
	//	*Query_QuerySql
	Query                isQuery_Query `protobuf_oneof:"query"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_55c136aa8978e5e9, []int{4}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

type isQuery_Query interface {
	isQuery_Query()
}

type Query_QueryAst struct {
	QueryAst *ASTQuery `protobuf:"bytes,1,opt,name=query_ast,json=queryAst,proto3,oneof"`
}

type Query_QuerySql struct {
	QuerySql *SQLQuery `protobuf:"bytes,2,opt,name=query_sql,json=querySql,proto3,oneof"`
}

func (*Query_QueryAst) isQuery_Query() {}

func (*Query_QuerySql) isQuery_Query() {}

func (m *Query) GetQuery() isQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *Query) GetQueryAst() *ASTQuery {
	if x, ok := m.GetQuery().(*Query_QueryAst); ok {
		return x.QueryAst
	}
	return nil
}

func (m *Query) GetQuerySql() *SQLQuery {
	if x, ok := m.GetQuery().(*Query_QuerySql); ok {
		return x.QuerySql
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Query) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Query_QueryAst)(nil),
		(*Query_QuerySql)(nil),
	}
}

type SQLQuery struct {
	QueryStr             string   `protobuf:"bytes,1,opt,name=queryStr,proto3" json:"queryStr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SQLQuery) Reset()         { *m = SQLQuery{} }
func (m *SQLQuery) String() string { return proto.CompactTextString(m) }
func (*SQLQuery) ProtoMessage()    {}
func (*SQLQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_55c136aa8978e5e9, []int{5}
}

func (m *SQLQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SQLQuery.Unmarshal(m, b)
}
func (m *SQLQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SQLQuery.Marshal(b, m, deterministic)
}
func (m *SQLQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLQuery.Merge(m, src)
}
func (m *SQLQuery) XXX_Size() int {
	return xxx_messageInfo_SQLQuery.Size(m)
}
func (m *SQLQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLQuery.DiscardUnknown(m)
}

var xxx_messageInfo_SQLQuery proto.InternalMessageInfo

func (m *SQLQuery) GetQueryStr() string {
	if m != nil {
		return m.QueryStr
	}
	return ""
}

// Internal query representation.
type ASTQuery struct {
	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	// Like the SQL PROJECTION.
	Projection []string `protobuf:"bytes,2,rep,name=projection,proto3" json:"projection,omitempty"`
	// Like the SQL WHERE statement.
	Predicate []*qpu.AttributePredicate `protobuf:"bytes,3,rep,name=predicate,proto3" json:"predicate,omitempty"`
	// Timespamp predicate.
	// Has the same form as AttributePredicate, but it is separate simply
	// to allow as to refer to this with a specific name (tsPredicate).
	TsPredicate *qpu.SnapshotTimePredicate `protobuf:"bytes,4,opt,name=tsPredicate,proto3" json:"tsPredicate,omitempty"`
	OrderBy     *OrderBy                   `protobuf:"bytes,5,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	// Like the SQL LIMIT
	Limit                int64    `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ASTQuery) Reset()         { *m = ASTQuery{} }
func (m *ASTQuery) String() string { return proto.CompactTextString(m) }
func (*ASTQuery) ProtoMessage()    {}
func (*ASTQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_55c136aa8978e5e9, []int{6}
}

func (m *ASTQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ASTQuery.Unmarshal(m, b)
}
func (m *ASTQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ASTQuery.Marshal(b, m, deterministic)
}
func (m *ASTQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ASTQuery.Merge(m, src)
}
func (m *ASTQuery) XXX_Size() int {
	return xxx_messageInfo_ASTQuery.Size(m)
}
func (m *ASTQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ASTQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ASTQuery proto.InternalMessageInfo

func (m *ASTQuery) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *ASTQuery) GetProjection() []string {
	if m != nil {
		return m.Projection
	}
	return nil
}

func (m *ASTQuery) GetPredicate() []*qpu.AttributePredicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *ASTQuery) GetTsPredicate() *qpu.SnapshotTimePredicate {
	if m != nil {
		return m.TsPredicate
	}
	return nil
}

func (m *ASTQuery) GetOrderBy() *OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ASTQuery) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type OrderBy struct {
	AttributeName        string        `protobuf:"bytes,1,opt,name=attributeName,proto3" json:"attributeName,omitempty"`
	Direction            OrderBy_Order `protobuf:"varint,2,opt,name=direction,proto3,enum=OrderBy_Order" json:"direction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *OrderBy) Reset()         { *m = OrderBy{} }
func (m *OrderBy) String() string { return proto.CompactTextString(m) }
func (*OrderBy) ProtoMessage()    {}
func (*OrderBy) Descriptor() ([]byte, []int) {
	return fileDescriptor_55c136aa8978e5e9, []int{7}
}

func (m *OrderBy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderBy.Unmarshal(m, b)
}
func (m *OrderBy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderBy.Marshal(b, m, deterministic)
}
func (m *OrderBy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBy.Merge(m, src)
}
func (m *OrderBy) XXX_Size() int {
	return xxx_messageInfo_OrderBy.Size(m)
}
func (m *OrderBy) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBy.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBy proto.InternalMessageInfo

func (m *OrderBy) GetAttributeName() string {
	if m != nil {
		return m.AttributeName
	}
	return ""
}

func (m *OrderBy) GetDirection() OrderBy_Order {
	if m != nil {
		return m.Direction
	}
	return OrderBy_ASC
}

// A record for the stream returned by Query.
type ResponseStreamRecord struct {
	// This is here to be used for checking for gaps in the stream and for
	// ordering records per stream
	// (not yet implemented)
	SequenceId           int64                                 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	Type                 ResponseStreamRecord_StreamRecordType `protobuf:"varint,2,opt,name=type,proto3,enum=ResponseStreamRecord_StreamRecordType" json:"type,omitempty"`
	LogOp                *qpu.LogOperation                     `protobuf:"bytes,3,opt,name=logOp,proto3" json:"logOp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ResponseStreamRecord) Reset()         { *m = ResponseStreamRecord{} }
func (m *ResponseStreamRecord) String() string { return proto.CompactTextString(m) }
func (*ResponseStreamRecord) ProtoMessage()    {}
func (*ResponseStreamRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_55c136aa8978e5e9, []int{8}
}

func (m *ResponseStreamRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseStreamRecord.Unmarshal(m, b)
}
func (m *ResponseStreamRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseStreamRecord.Marshal(b, m, deterministic)
}
func (m *ResponseStreamRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseStreamRecord.Merge(m, src)
}
func (m *ResponseStreamRecord) XXX_Size() int {
	return xxx_messageInfo_ResponseStreamRecord.Size(m)
}
func (m *ResponseStreamRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseStreamRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseStreamRecord proto.InternalMessageInfo

func (m *ResponseStreamRecord) GetSequenceId() int64 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func (m *ResponseStreamRecord) GetType() ResponseStreamRecord_StreamRecordType {
	if m != nil {
		return m.Type
	}
	return ResponseStreamRecord_UPDATEOP
}

func (m *ResponseStreamRecord) GetLogOp() *qpu.LogOperation {
	if m != nil {
		return m.LogOp
	}
	return nil
}

// Simplification of ResponseStreamRecord
// used for QueryUnary.
type QueryResponse struct {
	Results              []*qpu.LogOperation `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *QueryResponse) Reset()         { *m = QueryResponse{} }
func (m *QueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()    {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55c136aa8978e5e9, []int{9}
}

func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResponse.Unmarshal(m, b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
}
func (m *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(m, src)
}
func (m *QueryResponse) XXX_Size() int {
	return xxx_messageInfo_QueryResponse.Size(m)
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

func (m *QueryResponse) GetResults() []*qpu.LogOperation {
	if m != nil {
		return m.Results
	}
	return nil
}

type ConfigRequest struct {
	// Just here for future use, not actually used.
	Clock                *qpu.SnapshotTimePredicate `protobuf:"bytes,1,opt,name=clock,proto3" json:"clock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ConfigRequest) Reset()         { *m = ConfigRequest{} }
func (m *ConfigRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigRequest) ProtoMessage()    {}
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55c136aa8978e5e9, []int{10}
}

func (m *ConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigRequest.Unmarshal(m, b)
}
func (m *ConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigRequest.Marshal(b, m, deterministic)
}
func (m *ConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigRequest.Merge(m, src)
}
func (m *ConfigRequest) XXX_Size() int {
	return xxx_messageInfo_ConfigRequest.Size(m)
}
func (m *ConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigRequest proto.InternalMessageInfo

func (m *ConfigRequest) GetClock() *qpu.SnapshotTimePredicate {
	if m != nil {
		return m.Clock
	}
	return nil
}

type ConfigResponse struct {
	QpuType              ConfigResponse_QPUType    `protobuf:"varint,1,opt,name=qpu_type,json=qpuType,proto3,enum=ConfigResponse_QPUType" json:"qpu_type,omitempty"`
	Schema               []string                  `protobuf:"bytes,2,rep,name=schema,proto3" json:"schema,omitempty"`
	SupportedQueries     []*qpu.AttributePredicate `protobuf:"bytes,3,rep,name=supportedQueries,proto3" json:"supportedQueries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ConfigResponse) Reset()         { *m = ConfigResponse{} }
func (m *ConfigResponse) String() string { return proto.CompactTextString(m) }
func (*ConfigResponse) ProtoMessage()    {}
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55c136aa8978e5e9, []int{11}
}

func (m *ConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigResponse.Unmarshal(m, b)
}
func (m *ConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigResponse.Marshal(b, m, deterministic)
}
func (m *ConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigResponse.Merge(m, src)
}
func (m *ConfigResponse) XXX_Size() int {
	return xxx_messageInfo_ConfigResponse.Size(m)
}
func (m *ConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigResponse proto.InternalMessageInfo

func (m *ConfigResponse) GetQpuType() ConfigResponse_QPUType {
	if m != nil {
		return m.QpuType
	}
	return ConfigResponse_DATASTORE_DRIVER
}

func (m *ConfigResponse) GetSchema() []string {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *ConfigResponse) GetSupportedQueries() []*qpu.AttributePredicate {
	if m != nil {
		return m.SupportedQueries
	}
	return nil
}

type AckMsg struct {
	SequenceId           int64    `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckMsg) Reset()         { *m = AckMsg{} }
func (m *AckMsg) String() string { return proto.CompactTextString(m) }
func (*AckMsg) ProtoMessage()    {}
func (*AckMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_55c136aa8978e5e9, []int{12}
}

func (m *AckMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckMsg.Unmarshal(m, b)
}
func (m *AckMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckMsg.Marshal(b, m, deterministic)
}
func (m *AckMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckMsg.Merge(m, src)
}
func (m *AckMsg) XXX_Size() int {
	return xxx_messageInfo_AckMsg.Size(m)
}
func (m *AckMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_AckMsg.DiscardUnknown(m)
}

var xxx_messageInfo_AckMsg proto.InternalMessageInfo

func (m *AckMsg) GetSequenceId() int64 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func init() {
	proto.RegisterEnum("OrderBy_Order", OrderBy_Order_name, OrderBy_Order_value)
	proto.RegisterEnum("ResponseStreamRecord_StreamRecordType", ResponseStreamRecord_StreamRecordType_name, ResponseStreamRecord_StreamRecordType_value)
	proto.RegisterEnum("ConfigResponse_QPUType", ConfigResponse_QPUType_name, ConfigResponse_QPUType_value)
	proto.RegisterType((*NoOpReq)(nil), "NoOpReq")
	proto.RegisterType((*NoOpResp)(nil), "NoOpResp")
	proto.RegisterType((*RequestStreamRecord)(nil), "RequestStreamRecord")
	proto.RegisterType((*QueryRequest)(nil), "QueryRequest")
	proto.RegisterMapType((map[string]string)(nil), "QueryRequest.MetadataEntry")
	proto.RegisterType((*Query)(nil), "Query")
	proto.RegisterType((*SQLQuery)(nil), "SQLQuery")
	proto.RegisterType((*ASTQuery)(nil), "ASTQuery")
	proto.RegisterType((*OrderBy)(nil), "OrderBy")
	proto.RegisterType((*ResponseStreamRecord)(nil), "ResponseStreamRecord")
	proto.RegisterType((*QueryResponse)(nil), "QueryResponse")
	proto.RegisterType((*ConfigRequest)(nil), "ConfigRequest")
	proto.RegisterType((*ConfigResponse)(nil), "ConfigResponse")
	proto.RegisterType((*AckMsg)(nil), "AckMsg")
}

func init() { proto.RegisterFile("api/protobuf-spec/qpu_api.proto", fileDescriptor_55c136aa8978e5e9) }

var fileDescriptor_55c136aa8978e5e9 = []byte{
	// 956 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0xdf, 0x72, 0xda, 0xc6,
	0x17, 0x46, 0xc6, 0x80, 0x74, 0x30, 0x8e, 0xb2, 0xf1, 0xef, 0x17, 0x06, 0x67, 0x1a, 0xcf, 0x4e,
	0x27, 0xa5, 0x93, 0x56, 0xce, 0x90, 0x76, 0xd2, 0x71, 0x73, 0x23, 0x1b, 0x35, 0x76, 0xc7, 0x18,
	0xbc, 0x12, 0xbd, 0xe8, 0x45, 0x99, 0x45, 0xda, 0xd8, 0x2a, 0x42, 0x12, 0xda, 0x55, 0x66, 0xf4,
	0x62, 0x7d, 0x93, 0xde, 0xf4, 0x25, 0xfa, 0x02, 0xbd, 0xe8, 0x68, 0x25, 0x61, 0x48, 0x98, 0xe6,
	0x0a, 0xce, 0xf9, 0xbe, 0xf3, 0x67, 0x3f, 0x9d, 0xb3, 0x0b, 0xcf, 0x69, 0xec, 0x9f, 0xc6, 0x49,
	0x24, 0xa2, 0x79, 0xfa, 0xfe, 0x5b, 0x1e, 0x33, 0xf7, 0x74, 0x15, 0xa7, 0x33, 0x1a, 0xfb, 0x86,
	0xf4, 0xf6, 0x8e, 0x77, 0x12, 0x4a, 0x10, 0x7f, 0x0a, 0xba, 0x81, 0xcf, 0x42, 0xf1, 0x90, 0x00,
	0x1f, 0x43, 0xeb, 0x26, 0x1a, 0xc7, 0x84, 0xad, 0x90, 0x0e, 0x75, 0x2e, 0x92, 0xae, 0x72, 0xa2,
	0xf4, 0x35, 0x92, 0xff, 0xc5, 0xcf, 0x40, 0x2d, 0x40, 0x1e, 0xef, 0x40, 0x13, 0x78, 0x42, 0xd8,
	0x2a, 0x65, 0x5c, 0xd8, 0x22, 0x61, 0x74, 0x49, 0x98, 0x1b, 0x25, 0x1e, 0x7a, 0x0d, 0x07, 0xab,
	0x94, 0x25, 0x59, 0x89, 0xc9, 0x88, 0xf6, 0xa0, 0x63, 0xdc, 0x6e, 0x38, 0x2f, 0x6b, 0x64, 0x8b,
	0x84, 0x8e, 0xa1, 0x4e, 0xdd, 0x45, 0x77, 0x4f, 0x72, 0x5b, 0x86, 0xe9, 0x2e, 0x46, 0xfc, 0xee,
	0xb2, 0x46, 0x72, 0xef, 0xb9, 0x06, 0xad, 0xa4, 0xe0, 0xe1, 0x3f, 0x14, 0x38, 0xd8, 0x4c, 0x84,
	0x9e, 0x41, 0x43, 0x26, 0x2a, 0xcb, 0x34, 0xcb, 0x32, 0x85, 0x13, 0xbd, 0x01, 0x75, 0xc9, 0x04,
	0xf5, 0xa8, 0xa0, 0xdd, 0xbd, 0x93, 0x7a, 0xbf, 0x3d, 0x38, 0xde, 0xea, 0xc3, 0x18, 0x95, 0xa8,
	0x15, 0x8a, 0x24, 0x23, 0x6b, 0x32, 0x42, 0xb0, 0xcf, 0xb3, 0xd0, 0xed, 0xd6, 0x4f, 0x94, 0xbe,
	0x4a, 0xe4, 0xff, 0xde, 0x8f, 0xd0, 0xd9, 0xa2, 0xe7, 0x92, 0x2c, 0x58, 0x56, 0x49, 0xb2, 0x60,
	0x19, 0x3a, 0x82, 0xc6, 0x07, 0x1a, 0xa4, 0x4c, 0x1e, 0x44, 0x23, 0x85, 0x71, 0xb6, 0xf7, 0x83,
	0x82, 0x3d, 0x68, 0xc8, 0xc2, 0xa8, 0x0f, 0x9a, 0xec, 0x6d, 0x46, 0xd7, 0xda, 0x68, 0x86, 0x69,
	0x3b, 0x12, 0xbd, 0xac, 0x11, 0x55, 0xa2, 0x26, 0x17, 0x0f, 0x4c, 0xbe, 0x0a, 0x4a, 0x65, 0x34,
	0xc3, 0xbe, 0xbd, 0xde, 0x66, 0xda, 0xab, 0xe0, 0xbc, 0x55, 0x8a, 0x80, 0x5f, 0x80, 0x5a, 0x11,
	0x50, 0x0f, 0x4a, 0xc2, 0xfa, 0xab, 0xad, 0x6d, 0xfc, 0xb7, 0x02, 0x6a, 0x55, 0x33, 0x6f, 0x5a,
	0xd0, 0x79, 0xc0, 0x4a, 0x56, 0x61, 0xa0, 0x2f, 0x00, 0xe2, 0x24, 0xfa, 0x9d, 0xb9, 0xc2, 0x8f,
	0x42, 0x29, 0x9e, 0x46, 0x36, 0x3c, 0xe8, 0x7b, 0xd0, 0xe2, 0x84, 0x79, 0xbe, 0x4b, 0x05, 0xeb,
	0xd6, 0xa5, 0xb6, 0x4f, 0x8d, 0x7c, 0xf6, 0x4c, 0x21, 0x12, 0x7f, 0x9e, 0x0a, 0x36, 0xa9, 0x60,
	0xf2, 0xc0, 0x44, 0x6f, 0xa1, 0x2d, 0xf8, 0x1a, 0xe9, 0xee, 0xcb, 0x63, 0xf5, 0x64, 0xa0, 0x1d,
	0xd2, 0x98, 0xdf, 0x47, 0xc2, 0xf1, 0x97, 0x1b, 0xb1, 0x9b, 0x74, 0x84, 0xa1, 0x15, 0x25, 0x1e,
	0x4b, 0xce, 0xb3, 0x6e, 0x43, 0x46, 0xaa, 0xc6, 0xb8, 0xb0, 0x49, 0x05, 0xe4, 0xc7, 0x09, 0xfc,
	0xa5, 0x2f, 0xba, 0xcd, 0x13, 0xa5, 0x5f, 0x27, 0x85, 0x81, 0x33, 0x68, 0x95, 0x4c, 0xf4, 0x25,
	0x74, 0x68, 0xd5, 0xe3, 0x0d, 0x5d, 0x56, 0xe7, 0xde, 0x76, 0xa2, 0x6f, 0x40, 0xf3, 0xfc, 0x64,
	0x7d, 0x7c, 0xa5, 0x7f, 0x38, 0x38, 0xac, 0x8a, 0x15, 0xbf, 0xe4, 0x81, 0x80, 0x7b, 0xd0, 0x90,
	0x3e, 0xd4, 0x82, 0xba, 0x69, 0x5f, 0xe8, 0x35, 0xa4, 0xc2, 0xfe, 0xd0, 0xb2, 0x2f, 0x74, 0x05,
	0xff, 0xa3, 0xc0, 0x51, 0xbe, 0x42, 0x51, 0xc8, 0xd9, 0xd6, 0xa6, 0x3c, 0x87, 0x36, 0xcf, 0xe7,
	0x30, 0x74, 0xd9, 0xcc, 0xf7, 0x64, 0x1b, 0x75, 0x02, 0x95, 0xeb, 0xca, 0x43, 0x67, 0xb0, 0x2f,
	0xb2, 0x98, 0x95, 0xe5, 0x5f, 0x18, 0xbb, 0xb2, 0x18, 0x9b, 0x86, 0x93, 0xc5, 0x8c, 0xc8, 0x18,
	0xf4, 0x15, 0x34, 0x82, 0xe8, 0x6e, 0x1c, 0xcb, 0x11, 0x6e, 0x0f, 0x1e, 0x4b, 0x89, 0xaf, 0x73,
	0x0f, 0x4b, 0x68, 0xde, 0x33, 0x29, 0x70, 0xfc, 0x1b, 0xe8, 0x1f, 0xa7, 0x40, 0x07, 0xa0, 0x4e,
	0x27, 0x43, 0xd3, 0xb1, 0xc6, 0x13, 0xbd, 0x86, 0x1e, 0x41, 0xbb, 0xb0, 0x86, 0xd6, 0xb5, 0x63,
	0xea, 0x0a, 0xd2, 0xa0, 0x61, 0x3b, 0xa6, 0x63, 0xe9, 0x7b, 0xa8, 0x03, 0xda, 0xa5, 0x65, 0x12,
	0xe7, 0xdc, 0x32, 0x1d, 0xbd, 0x8e, 0x1e, 0x43, 0xc7, 0xba, 0x19, 0xce, 0xc6, 0x3f, 0xcd, 0x6c,
	0x87, 0x58, 0xe6, 0x48, 0xdf, 0xc7, 0x6f, 0xa1, 0x53, 0xae, 0x5c, 0xd1, 0x3c, 0x7a, 0x99, 0xaf,
	0x33, 0x4f, 0x03, 0xc1, 0xbb, 0x8a, 0x9c, 0x9b, 0x1d, 0xbd, 0x55, 0x0c, 0x6c, 0x42, 0xe7, 0x22,
	0x0a, 0xdf, 0xfb, 0x77, 0xd5, 0xc2, 0xbf, 0x82, 0x86, 0x1b, 0x44, 0xee, 0xa2, 0xdc, 0x9d, 0xff,
	0x1a, 0x9d, 0x82, 0x88, 0xff, 0x54, 0xe0, 0xb0, 0xca, 0x51, 0xb6, 0x30, 0x00, 0x35, 0xbf, 0x47,
	0xa5, 0xb8, 0x8a, 0x14, 0xf7, 0xa9, 0xb1, 0x4d, 0x31, 0x6e, 0x27, 0x53, 0xa9, 0x66, 0x6b, 0x15,
	0xa7, 0x52, 0x93, 0xff, 0x43, 0x93, 0xbb, 0xf7, 0x6c, 0x49, 0xcb, 0x65, 0x28, 0x2d, 0x74, 0x01,
	0x3a, 0x4f, 0xe3, 0x38, 0x4a, 0x04, 0xf3, 0xf2, 0x83, 0xfa, 0x8c, 0x7f, 0x6e, 0x1f, 0x3e, 0x09,
	0xc0, 0x03, 0x68, 0x95, 0x05, 0xd1, 0x11, 0xe8, 0x43, 0xd3, 0x31, 0x6d, 0x67, 0x4c, 0xac, 0xd9,
	0x90, 0x5c, 0xfd, 0x62, 0x11, 0xbd, 0x96, 0xcf, 0x95, 0x3d, 0x1d, 0xe9, 0x4a, 0x3e, 0x57, 0x3f,
	0x8f, 0xaf, 0x6e, 0xf4, 0x3d, 0xfc, 0x35, 0x34, 0x8b, 0x7b, 0xf2, 0xb3, 0x83, 0x34, 0xf8, 0x4b,
	0x81, 0xe6, 0xed, 0x64, 0x6a, 0x4e, 0xae, 0xd0, 0x59, 0x75, 0x11, 0x1d, 0x19, 0x3b, 0x6e, 0xef,
	0xde, 0xff, 0x76, 0x0e, 0x19, 0xae, 0xf5, 0x95, 0x57, 0x0a, 0x7a, 0x09, 0x20, 0x63, 0xa7, 0x21,
	0x4d, 0x32, 0x74, 0x60, 0xc4, 0xf3, 0xf5, 0x6d, 0xda, 0xeb, 0x6c, 0x58, 0x3c, 0xc6, 0x35, 0x64,
	0x80, 0xf6, 0x8e, 0x89, 0x42, 0x55, 0x74, 0x68, 0x6c, 0x7d, 0xc5, 0xde, 0xa3, 0x8f, 0xe4, 0xc6,
	0x35, 0xf4, 0x06, 0xe0, 0x1d, 0x13, 0x23, 0x26, 0x12, 0xdf, 0xe5, 0x08, 0xe5, 0xe9, 0x4a, 0xa3,
	0x0a, 0x7a, 0xb2, 0xe5, 0xab, 0x02, 0xcf, 0xbf, 0xfb, 0x75, 0x70, 0xe7, 0x8b, 0xfb, 0x74, 0x6e,
	0xb8, 0xd1, 0xf2, 0xd4, 0xfb, 0x40, 0xb9, 0x1f, 0x50, 0x2e, 0x1f, 0x3e, 0x96, 0xf2, 0x53, 0x3f,
	0x14, 0x2c, 0x09, 0x69, 0x50, 0xbc, 0x84, 0xd5, 0xfb, 0x39, 0x6f, 0x4a, 0xf3, 0xf5, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xc7, 0x75, 0x92, 0x30, 0x63, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QPUAPIClient is the client API for QPUAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QPUAPIClient interface {
	// The QPU Query API.
	Query(ctx context.Context, opts ...grpc.CallOption) (QPUAPI_QueryClient, error)
	// QueryUnary is a simplification of Query that returns a single response
	// instead of a stream.
	// It is used to simplify the client code for clients that have queries
	// that look like SELECT .. FROM .. WHERE .. LIMIT N
	// and so do not care about streaming anyways.
	QueryUnary(ctx context.Context, in *pb.QueryReq, opts ...grpc.CallOption) (*pb.QueryResp, error)
	// The QPU GetConfig API.
	// Used by a 'parent' QPU to request the configuration and query processing
	// capabilities of a 'child` QPU.
	GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	// QPUs implemement a mechanism for measuring the traffic between them
	// (each QPU measuring the total size of outbound messages)
	// GetDataTransfer was used for getting this measuremrents.
	// Disabled for now.
	// rpc GetDataTransfer(GetDataRequest) returns (DataTransferResponse) {}
	// rpc QueryNoOp(NoOpReq) returns (NoOpResp) {}
	// rpc QueryArgs(QueryRequest) returns (QueryResponse) {}
	GetMetrics(ctx context.Context, in *pb.MetricsRequest, opts ...grpc.CallOption) (*pb.MetricsResponse, error)
}

type qPUAPIClient struct {
	cc *grpc.ClientConn
}

func NewQPUAPIClient(cc *grpc.ClientConn) QPUAPIClient {
	return &qPUAPIClient{cc}
}

func (c *qPUAPIClient) Query(ctx context.Context, opts ...grpc.CallOption) (QPUAPI_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QPUAPI_serviceDesc.Streams[0], "/QPUAPI/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &qPUAPIQueryClient{stream}
	return x, nil
}

type QPUAPI_QueryClient interface {
	Send(*RequestStreamRecord) error
	Recv() (*ResponseStreamRecord, error)
	grpc.ClientStream
}

type qPUAPIQueryClient struct {
	grpc.ClientStream
}

func (x *qPUAPIQueryClient) Send(m *RequestStreamRecord) error {
	return x.ClientStream.SendMsg(m)
}

func (x *qPUAPIQueryClient) Recv() (*ResponseStreamRecord, error) {
	m := new(ResponseStreamRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *qPUAPIClient) QueryUnary(ctx context.Context, in *pb.QueryReq, opts ...grpc.CallOption) (*pb.QueryResp, error) {
	out := new(pb.QueryResp)
	err := c.cc.Invoke(ctx, "/QPUAPI/QueryUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qPUAPIClient) GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/QPUAPI/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qPUAPIClient) GetMetrics(ctx context.Context, in *pb.MetricsRequest, opts ...grpc.CallOption) (*pb.MetricsResponse, error) {
	out := new(pb.MetricsResponse)
	err := c.cc.Invoke(ctx, "/QPUAPI/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QPUAPIServer is the server API for QPUAPI service.
type QPUAPIServer interface {
	// The QPU Query API.
	Query(QPUAPI_QueryServer) error
	// QueryUnary is a simplification of Query that returns a single response
	// instead of a stream.
	// It is used to simplify the client code for clients that have queries
	// that look like SELECT .. FROM .. WHERE .. LIMIT N
	// and so do not care about streaming anyways.
	QueryUnary(context.Context, *pb.QueryReq) (*pb.QueryResp, error)
	// The QPU GetConfig API.
	// Used by a 'parent' QPU to request the configuration and query processing
	// capabilities of a 'child` QPU.
	GetConfig(context.Context, *ConfigRequest) (*ConfigResponse, error)
	// QPUs implemement a mechanism for measuring the traffic between them
	// (each QPU measuring the total size of outbound messages)
	// GetDataTransfer was used for getting this measuremrents.
	// Disabled for now.
	// rpc GetDataTransfer(GetDataRequest) returns (DataTransferResponse) {}
	// rpc QueryNoOp(NoOpReq) returns (NoOpResp) {}
	// rpc QueryArgs(QueryRequest) returns (QueryResponse) {}
	GetMetrics(context.Context, *pb.MetricsRequest) (*pb.MetricsResponse, error)
}

func RegisterQPUAPIServer(s *grpc.Server, srv QPUAPIServer) {
	s.RegisterService(&_QPUAPI_serviceDesc, srv)
}

func _QPUAPI_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QPUAPIServer).Query(&qPUAPIQueryServer{stream})
}

type QPUAPI_QueryServer interface {
	Send(*ResponseStreamRecord) error
	Recv() (*RequestStreamRecord, error)
	grpc.ServerStream
}

type qPUAPIQueryServer struct {
	grpc.ServerStream
}

func (x *qPUAPIQueryServer) Send(m *ResponseStreamRecord) error {
	return x.ServerStream.SendMsg(m)
}

func (x *qPUAPIQueryServer) Recv() (*RequestStreamRecord, error) {
	m := new(RequestStreamRecord)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _QPUAPI_QueryUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QPUAPIServer).QueryUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QPUAPI/QueryUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QPUAPIServer).QueryUnary(ctx, req.(*pb.QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QPUAPI_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QPUAPIServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QPUAPI/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QPUAPIServer).GetConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QPUAPI_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QPUAPIServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QPUAPI/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QPUAPIServer).GetMetrics(ctx, req.(*pb.MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QPUAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "QPUAPI",
	HandlerType: (*QPUAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryUnary",
			Handler:    _QPUAPI_QueryUnary_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _QPUAPI_GetConfig_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _QPUAPI_GetMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _QPUAPI_Query_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/protobuf-spec/qpu_api.proto",
}
